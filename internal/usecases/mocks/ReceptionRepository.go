// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "github.com/grigory222/avito-backend-trainee/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// ReceptionRepository is an autogenerated mock type for the ReceptionRepository type
type ReceptionRepository struct {
	mock.Mock
}

// AddReception provides a mock function with given fields: pvzId
func (_m *ReceptionRepository) AddReception(pvzId string) (models.Reception, error) {
	ret := _m.Called(pvzId)

	if len(ret) == 0 {
		panic("no return value specified for AddReception")
	}

	var r0 models.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Reception, error)); ok {
		return rf(pvzId)
	}
	if rf, ok := ret.Get(0).(func(string) models.Reception); ok {
		r0 = rf(pvzId)
	} else {
		r0 = ret.Get(0).(models.Reception)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pvzId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastReception provides a mock function with given fields: pvzId
func (_m *ReceptionRepository) GetLastReception(pvzId string) (models.Reception, error) {
	ret := _m.Called(pvzId)

	if len(ret) == 0 {
		panic("no return value specified for GetLastReception")
	}

	var r0 models.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Reception, error)); ok {
		return rf(pvzId)
	}
	if rf, ok := ret.Get(0).(func(string) models.Reception); ok {
		r0 = rf(pvzId)
	} else {
		r0 = ret.Get(0).(models.Reception)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pvzId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReceptionStatus provides a mock function with given fields: recId, status
func (_m *ReceptionRepository) UpdateReceptionStatus(recId string, status string) (models.Reception, error) {
	ret := _m.Called(recId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReceptionStatus")
	}

	var r0 models.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (models.Reception, error)); ok {
		return rf(recId, status)
	}
	if rf, ok := ret.Get(0).(func(string, string) models.Reception); ok {
		r0 = rf(recId, status)
	} else {
		r0 = ret.Get(0).(models.Reception)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(recId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReceptionRepository creates a new instance of ReceptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReceptionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReceptionRepository {
	mock := &ReceptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
