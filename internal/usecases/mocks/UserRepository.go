// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "github.com/grigory222/avito-backend-trainee/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// AddNewUser provides a mock function with given fields: email, passwordHash, role
func (_m *UserRepository) AddNewUser(email string, passwordHash string, role string) (models.User, error) {
	ret := _m.Called(email, passwordHash, role)

	if len(ret) == 0 {
		panic("no return value specified for AddNewUser")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (models.User, error)); ok {
		return rf(email, passwordHash, role)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) models.User); ok {
		r0 = rf(email, passwordHash, role)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(email, passwordHash, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *UserRepository) GetUserByEmail(email string) (models.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmailAndPassword provides a mock function with given fields: email, passwordHash
func (_m *UserRepository) GetUserByEmailAndPassword(email string, passwordHash string) (models.User, error) {
	ret := _m.Called(email, passwordHash)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmailAndPassword")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (models.User, error)); ok {
		return rf(email, passwordHash)
	}
	if rf, ok := ret.Get(0).(func(string, string) models.User); ok {
		r0 = rf(email, passwordHash)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, passwordHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
