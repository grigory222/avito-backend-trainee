// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	time "time"

	models "github.com/grigory222/avito-backend-trainee/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// PVZRepository is an autogenerated mock type for the PVZRepository type
type PVZRepository struct {
	mock.Mock
}

// AddPVZ provides a mock function with given fields: city
func (_m *PVZRepository) AddPVZ(city string) (models.PVZ, error) {
	ret := _m.Called(city)

	if len(ret) == 0 {
		panic("no return value specified for AddPVZ")
	}

	var r0 models.PVZ
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.PVZ, error)); ok {
		return rf(city)
	}
	if rf, ok := ret.Get(0).(func(string) models.PVZ); ok {
		r0 = rf(city)
	} else {
		r0 = ret.Get(0).(models.PVZ)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFlatPVZRows provides a mock function with given fields: startDate, endDate, offset, limit
func (_m *PVZRepository) GetFlatPVZRows(startDate time.Time, endDate time.Time, offset int, limit int) ([]models.FlatRow, error) {
	ret := _m.Called(startDate, endDate, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetFlatPVZRows")
	}

	var r0 []models.FlatRow
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time, int, int) ([]models.FlatRow, error)); ok {
		return rf(startDate, endDate, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time, int, int) []models.FlatRow); ok {
		r0 = rf(startDate, endDate, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FlatRow)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time, int, int) error); ok {
		r1 = rf(startDate, endDate, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPVZById provides a mock function with given fields: pvzId
func (_m *PVZRepository) GetPVZById(pvzId string) (models.PVZ, error) {
	ret := _m.Called(pvzId)

	if len(ret) == 0 {
		panic("no return value specified for GetPVZById")
	}

	var r0 models.PVZ
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.PVZ, error)); ok {
		return rf(pvzId)
	}
	if rf, ok := ret.Get(0).(func(string) models.PVZ); ok {
		r0 = rf(pvzId)
	} else {
		r0 = ret.Get(0).(models.PVZ)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pvzId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPVZRepository creates a new instance of PVZRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPVZRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PVZRepository {
	mock := &PVZRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
